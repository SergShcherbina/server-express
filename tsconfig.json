{
    "compilerOptions": {
        "strict": true /* !!! Включить все параметры строгой проверки типов. */,
        "rootDir": "./" /* КОМПИЛИРОВАТЬ ВСЕ ФАЙЛЫ ТОЛЬКО ИЗ ДИРЕКТОРИИ src */,
        "outDir": "./dist" /* КУДА СКЛАДЫВАТЬ СКОМПИЛИРОВАННЫЕ ФАЙЛЫ. */,

        "baseUrl": "./src" /* Задает базовый URL-адрес для всех импортов модулей. */,
        "module": "CommonJS" /* Задает формат модулей, используемый при компиляции кода TypeScript в JavaScript. */,
        "alwaysStrict": true /* 'use strict' ДЛЯ ВСЕХ СКОМПИЛИРОВАННЫХ ФАЙЛОВ . */,

        "allowUnreachableCode": true /* НЕИСПОЛЬЗУЕМЫЙ КОД, КОТОРЫЙ НИКОГДА НЕ ВЫЗЫВАЕТСЯ. */,
        "noFallthroughCasesInSwitch": true /* ПРОВЕРЯЕТ switch НА ПРАВИЛЬНОЕ НАЛИЧИЕ break ВЕУТРИ case.*/,
        "skipLibCheck": true /* Пропустить проверку типа для всех файлов .d.ts. */,
        "esModuleInterop": true /* Позволяет использовать импорты ES6 в коде, который зависит от CommonJS модулей, без необходимости изменять сами модули. */,
        "forceConsistentCasingInFileNames": true /* Убедитесь, что при импорте указан правильный регистр. */,
        "target": "es2016" /* TypeScript будет генерировать код, совместимый со стандартом ECMAScript 2016 (ES7). */,
        "includes": ["src.**/*.*"] /* Список файлов, которые будут включены в компиляцию. */

        /* Заменяет "strict": true, */
        //"strictFunctionTypes": true,                        /* При назначении функций убедитесь, что параметры и возвращаемые значения совместимы по подтипам. */
        //"noImplicitAny": true,                              /* !ОШИБКИ ДЛЯ ВЫРАЖЕНИЙ С ПОДРОЗУМЕВАЕМЫМ ТИПОМ 'any', явно задавать можно. */
        //"strictNullChecks": true,                           /* При проверке типа учитывайте значения «null» и 'undefined' */
        //"noUnusedParameters": true,                         /* НЕИСПОЛЬЗУЕМЫЕ ПАРАМЕТРЫ, */
        //"strictPropertyInitialization": true,               /* Проверьте свойства класса, которые объявлены, но не установлены в конструкторе. */
        //"strictBindCallApply": true,                        /* Убедитесь, что аргументы методов «bind», «call» и «apply» соответствуют исходной функции. */
        //"noImplicitThis": true,                             /* Включить отчет об ошибках, когда «this» присвоен тип «any».. */
        /*  */

        // "noImplicitOverride": true,                        /* СООБЩАЕТ В НАСЛ КЛАССЕ, ЧТО НАЗВАНИЕ МЕТОДА РОДИТЕЛЯ ИЗМЕНИЛОСЬ . */
        // "noImplicitReturns": true,                         /* ОШИБКА ДЛЯ ПУТЕЙ ФУНКЦИЙ КОТОРЫЕ ЯВНО НЕ ВОЗВРАЩАЮТ ЗНАЧЕНИЯ. */
        // "noPropertyAccessFromIndexSignature": true,        /* ЕСЛИ key ОБЬЕКТА ДИНАМИЧЕСКОЕ, ТО ОБРАЩАТЬСЯ К НЕМУ С ПОМОЩЬЮ obj['key'] */
        // "noUnusedLocals": true,                            /* НЕИСПОЛЬЗУЕМЫЕ ПЕРЕМЕННЫЕ, часто уже проверяет eslint */
        // "declarationDir": "./",                            /* указывает директорию для генерации файлов объявлений (.d.ts) */

        /* Projects */
        // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
        // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
        // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
        // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
        // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
        // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

        /* Language and Environment */
        // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
        // "jsx": "preserve",                                /* Specify what JSX code is generated. */
        // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
        // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
        // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
        // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
        // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
        // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
        // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
        // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
        // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

        /* Modules */
        // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
        // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
        // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
        // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
        // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
        // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
        // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
        // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
        // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
        // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
        // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
        // "resolveJsonModule": true,                        /* Enable importing .json files. */
        // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
        // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

        /* JavaScript Support */
        // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
        // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
        // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

        /* Emit */
        // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
        // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
        // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
        // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
        // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
        // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
        // "removeComments": true,                           /* Disable emitting comments. */
        // "noEmit": true,                                   /* Disable emitting files from a compilation. */
        // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
        // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
        // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
        // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
        // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
        // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
        // "newLine": "crlf",                                /* Set the newline character for emitting files. */
        // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
        // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
        // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
        // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
        /* Interop Constraints */
        // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
        // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
        // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
        // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
        // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */

        /* Type Checking */
        // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
        // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
        // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
        // -"allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
        /* Completeness */
        // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    }
}
